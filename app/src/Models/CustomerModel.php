<?php

namespace App\Models;

use App\Entities\Customer;
use App\Framework\Model;
use App\Storage\Storage;

//class CustomerModel extends Model
class CustomerModel extends Customer
{
    private $customer = null;
  //  private $contracts =[];

    protected $_collections=[];
    // private $customerRepository = null;

    protected static array $_relations = [
        "contract" => [
            'type' => 'hasMany'
            , 'local' => 'id'
            , 'references' => 'App\Entities\Contract.customer_id'
        ]
    ];


//    function object2array($object): array{
//        $vars= get_object_vars($object);
//
//        $res= [];
//        foreach($vars as $key => $value) {
//
//            if(is_array($value)){
//                foreach ($value as $k => $v) {
//                    if(is_object($v) && method_exists($v, 'toArray')){
//                        $res[$key][$k] = $v->toArray();
//                    }else{
//                        $res[$key][$k] = $v;
//                    }
//                }
//            }
//            if(is_object($value) && method_exists($value, 'toArray')){
//                $res[$key] = $value->toArray();
//            }else{
//                $res[$key] = $value;
//            }
//            // $value = $object->$key ()
//        }
//        return $vars;
//    }


    public function toArray(): array
    {
       // return parent::toArray(); // TODO: Change the autogenerated stub

        $vars= get_object_vars($this);

        $result = [];
        foreach($vars as $kk => $vv){
            if($kk=='_collections'){
                foreach($vv as $name => $collection){
                    foreach($collection as $object)
                        $result['_collections'][$name][] =$object->toArray(); ;
                }
            }else{
                $result[$kk] = $vv;
            }

        }

        return $result;

    }

    public function __construct(  $id = null)
    {
        foreach (self::fillable() as $f) {
            $this->$f = '';
         }

        if($id){
            $this->id = $id;
            $customer = Storage::findByID(CustomerModel::class,  $id );
             foreach(self::fillable() as $f){
                $this->$f = $customer->$f;
            }
        }

        $this->loadRelations();
    }

    public function loadRelations($key= null)
    {

        foreach (static::$_relations as $name => $rel) {

            if($key && $key !== $name){
                continue;
            }
            $rel = (object)$rel;
            $ref = explode('.', $rel->references);
            $class = $ref[0];
            $field = $ref[1];

            $local_field = $rel->local;
            $getter = 'get' . ucfirst($local_field);

            switch ($rel->type) {
                case 'hasOne':
                    $this->_collections[$name] = Storage::find($class, [$field => $this->$getter()]);
                    break;
                case 'hasMany':
                default:
                    //$this->references[$name] = Storage::find($class, [$field => $this->$getter()]);
                    $this->_collections[$name] = Storage::find($class, [$field => $this->$getter()]);
                    break;
            }

        }

    }


    public static function get($id=null): CustomerModel{
//
//
//
//        if($id){
//          $this->id = $id;
//            $customer = Storage::find(Customer::class, ['id' => $id]);
            $customer = Storage::findByID(CustomerModel::class,  $id );
            //$this->customer = $customer;
            $customer->loadRelations();
            // dd($customer);
            return  $customer;
//        }
//        $model = new CustomerModel(0);
//
//        return $model;
//        //return new self::class ;
//
//
//        //$customer_entity = Storage::findByID(Customer::class, $id);
//
//        $model = new CustomerModel($id);
//        $model->loadRelations() ;
//      //  trace($model)    ;
//        return $model;

//        $this->loadRelations();
//        // $this->contracts = $this->customer->getContracts();
//        $this->loadRelations('contracts');
    }


    function save(): void
    {
        $this->save();
//        parent::save();
//
//        $this->customer->save();
//        $this->customerRepository->get($this->customer);
        foreach ($this->_collections as $collection){
            foreach($collection as $entity){
                $entity->save();
            }
        }
    }

//    public function getContracts() :array
//    {
//        return $this->_collections['contract']??[];
//    }
    public function getContracts(){
        if(!isset($this->_collections['contract'])){
            $this->_collections['contract']= $this->loadRelations('contracts');
        }

        return $this->_collections['contract'];
    }

    public function addContract(\App\Entities\Contract $contract)
    {

        $this->_collections['contract'][] = $contract;
    }

}