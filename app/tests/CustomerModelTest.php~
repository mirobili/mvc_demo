<?php

use App\Entities\Contract;
use App\Models\CustomerModel;

class CustomerModelTest extends \PHPUnit\Framework\TestCase
{

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_Customer_model_create()
    {
        $id=69;
        $model = new CustomerModel($id);
   //    trace($model);
        $this->assertInstanceOf( CustomerModel::class, $model);

    }

    public function test_Customer_model_get_by_id()
    {
        $id= 69;
        $model = new CustomerModel($id);
//        trace('tesssssssssssssssssst') ;
//        trace($model) ;
        $this->assertInstanceOf( CustomerModel::class, $model);
    }
    public function test_Customer_model_get_by_id_and_load_references()
    {
        $id= 1;
        $model = new CustomerModel($id);
       // dd($model);

        $contracts = $model->getContracts();
        $this->assertContainsOnlyInstancesOf(Contract::class , $contracts);

    }

    public function test_Customer_model_add_new_contract_pre_save()
    {
        $id= 69;
        $model = new CustomerModel($id);
        $contracts = $model->getContracts();

//        $contract = new Contract(protected $id=null, protected $code=null, protected $customer_id=null, protected $valid_from=null, protected $valid_to=null, protected $status=null,
//                                protected $created_at=null, protected $updated_at=null));
//
        $contract = new Contract();

        $contract->setCustomerId($model->getId());
        $contract->setCode('CDSM1000-050-1003333-333');

        $valid_from = date('Y-m-d H:i:s');
        $valid_to = date('Y-m-d H:i:s', strtotime("$valid_from +1 year") );
        $status = 1;

        $contract->setValidFrom($valid_from);
        $contract->setValidTo($valid_to);
        $contract->setStatus($status);
          // $contract->save();

       // $contracts = $model->getContracts();
        $model->addContract($contract);

     //   trace($model);

        $this->assertContainsOnlyInstancesOf(Contract::class , $contracts);
        $this->assertNotEmpty($model->getContracts());
    }

    public function test_Customer_model_add_new_contract_after_save()
    {

        
        $id= 69;
        $model = new CustomerModel ($id);
        $contracts = $model->getContracts();
        $contractsCountStart= count($contracts);

//        $contract = new Contract(protected $id=null, protected $code=null, protected $customer_id=null, protected $valid_from=null, protected $valid_to=null, protected $status=null,
//                                protected $created_at=null, protected $updated_at=null));
//
        $contract = new Contract();

        $contract->setCustomerId($model->getId());
        $contract->setCode('CDSM1000-050-1003333 '. date('H:i:s'));

        $valid_from = date('Y-m-d H:i:s');
        $valid_to = date('Y-m-d H:i:s', strtotime("$valid_from +1 year") );
        $status = "Active";

        $contract->setValidFrom($valid_from);
        $contract->setValidTo($valid_to);
        $contract->setStatus($status);

        # Add contract to model
        $model->addContract($contract);
        $model->save();

        $this->assertContainsOnlyInstancesOf(Contract::class , $contracts);
        $this->assertCount($contractsCountStart + 1, $model->getContracts());

    }

    public function test_Customer_model_Save_method_saves_all_changes_to_all_contracts()
    {
        $id= 69;

        # Create model from DB

        $model = new CustomerModel($id);

        # Iterate over contracts and set status to Canceled + current time

        $time = date('H:i:s');
        $new_status = "Canceled ". $time;
        $contracts = $model->getContracts();
        foreach($contracts as $contract){
            $contract->setStatus($new_status);
        }

        # Save Contracts to DB

      //  dd($contrac)

        $model->save();

        /******************/
        # fetch new model from DB with the same ID

        $new_model = new CustomerModel($id);
        $new_contracts = $new_model->getContracts();
            //trace($new_contracts);

        # Asserting the status of all Customer's contracts is set to Canceled + current time

        foreach($new_model->getContracts() as $contr){
            $this->assertEquals($new_status, $contr->getStatus());
        }

    }


    public function test_Customer_model_Change_customer_entity_attributes()
    {
        $id= 69;
        $model = new CustomerModel($id);

        $old_email = $model->getEmail();
        $new_email= $old_email.'+';
        $model->setEmail($new_email);
        $model->save();
       // trace($model) ;

        $new_model = CustomerModel::get($id);
        $this->assertEquals( $old_email.'+', $new_model->getEmail());
    }


    public function test_Customer_model_Find_Many()
    {
        $models =   CustomerModel::find(['name' => '%r%']);

        //trace($models);

        foreach($models as $mm){
            $mm->loadRelations();
            //trace($mm->getContracts());
        }

//        trace($models);

//
//
//        $old_email = $model->getEmail();
//        $new_email= $old_email.'+';
//        $model->setEmail($new_email);
//        $model->save();
//        trace($model) ;
//
//        $new_model = CustomerModel::get($id);
//        $this->assertEquals( $old_email.'+', $new_model->getEmail());
    }
}